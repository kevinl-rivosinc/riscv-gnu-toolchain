on:
  workflow_call:
    inputs:
      mode:
        required: true
        type: string
      target:
        required: true
        type: string
      gcchash:
        required: true
        type: string
      multilib:
        required: true
        type: string

jobs:
  build:
    runs-on: ubuntu-22.04
    environment: production
    steps:
      - uses: actions/checkout@v2

      - name: Load submodules from cache
        uses: actions/cache@v3
        id: restore-build
        with:
          path: |
            .git
            binutils
            dejagnu
            gcc
            gdb
            glibc
            llvm
            musl
            newlib
            pk
            qemu
            spike
            gdb
          key: submodules

      - name: Checkout gcc hash
        run: |
          cd gcc
          git fetch
          git checkout ${{ inputs.gcchash }}

      - name: Install dependencies
        run: sudo ./.github/setup-apt.sh

      - name: Configure
        run: |
          mkdir build
          cd build
          TARGET_TUPLE=($(echo ${{ inputs.target }} | tr "-" "\n"))
          CONFIGURE_TOOLCHAIN="../configure --prefix=$(pwd) --with-arch=${TARGET_TUPLE[0]} --with-abi=${TARGET_TUPLE[1]}"
          if [ "${{ inputs.multilib }}" == "multilib" ]; then
            $CONFIGURE_TOOLCHAIN --enable-multilib
          else
            $CONFIGURE_TOOLCHAIN
          fi

      - name: Make gcc
        run: |
          cd build
          make -j $(nproc) ${{ inputs.mode }}

      - name: Zip binaries
        run: |
          zip -r bin.zip build/bin

      - name: Upload binary artifact
        uses: actions/upload-artifact@v3
        with:
          name: gcc-${{ inputs.mode }}-${{ inputs.target }}-${{ inputs.gcchash }}-${{ inputs.multilib }}
          path: |
            bin.zip
          retention-days: 5

      - name: Zip stage2
        if: inputs.mode != 'musl'
        run: |
          zip -r stage2.zip build/build-gcc-${{ inputs.mode }}-stage2

      - name: Upload stage2 artifact
        if: inputs.mode != 'musl'
        uses: actions/upload-artifact@v3
        with:
          name: gcc-${{ inputs.mode }}-${{ inputs.target }}-${{ inputs.gcchash }}-${{ inputs.multilib }}-stage2
          path: |
            stage2.zip
          retention-days: 5

  test:
    if: ${{ inputs.mode != 'musl' }}
    runs-on: ubuntu-22.04
    environment: production
    needs: [build]
    steps:
      - uses: actions/checkout@v2

      - name: Load submodules from cache
        uses: actions/cache@v3
        id: restore-build
        with:
          path: |
            .git
            binutils
            dejagnu
            gcc
            gdb
            glibc
            llvm
            musl
            newlib
            pk
            qemu
            spike
            gdb
          key: submodules

      - name: Checkout gcc hash
        run: |
          cd gcc
          git fetch
          git checkout ${{ inputs.gcchash }}

      - name: Install dependencies
        run: sudo ./.github/setup-apt.sh

      - name: Configure
        run: |
          mkdir build
          cd build
          TARGET_TUPLE=($(echo ${{ inputs.target }} | tr "-" "\n"))
          CONFIGURE_TOOLCHAIN="../configure --prefix=$(pwd) --with-arch=${TARGET_TUPLE[0]} --with-abi=${TARGET_TUPLE[1]}"
          if [ "${{ inputs.multilib }}" == "multilib" ]; then
            $CONFIGURE_TOOLCHAIN --enable-multilib
          else
            $CONFIGURE_TOOLCHAIN
          fi

      - name: Restore stage2
        uses: actions/download-artifact@v3
        with:
          name: gcc-${{ inputs.mode }}-${{ inputs.target }}-${{ inputs.gcchash }}-${{ inputs.multilib }}-stage2

      - name: Unzip artifacts
        run: |
          unzip stage2.zip

      - name: Generate fake stamps to prevent rebuilding
        run: |
          mkdir build/stamps
          cd build/stamps
          touch -d "+2 days" check-write-permission
          touch -d "+2 days" build-gdb-newlib
          touch -d "+2 days" build-binutils-newlib
          touch -d "+2 days" build-gcc-newlib-stage1
          touch -d "+2 days" build-newlib-nano
          touch -d "+2 days" build-newlib
          touch -d "+2 days" merge-newlib-nano
          touch -d "+2 days" build-gcc-newlib-stage2

      - name: Build sanity check (should be instant)
        run: |
          cd build
          make ${{ inputs.mode }}

      - name: Run testsuite
        run: |
          cd build
          make -j $(nproc) report-${{ inputs.mode }} || true

      - name: Save results
        run: |
          cd build
          (make -j $(nproc) report > gcc-${{ inputs.mode }}-${{ inputs.target }}-${{ inputs.gcchash }}-${{ inputs.multilib }}-report.log) || true

      - name: Upload results artifact
        uses: actions/upload-artifact@v3
        with:
          name: gcc-${{ inputs.mode }}-${{ inputs.target }}-${{ inputs.gcchash }}-${{ inputs.multilib }}-report
          path: |
            gcc-${{ inputs.mode }}-${{ inputs.target }}-${{ inputs.gcchash }}-${{ inputs.multilib }}-report.log
          retention-days: 90

