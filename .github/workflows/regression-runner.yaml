on:
  workflow_call:
    inputs:
      mode:
        required: true
        type: string
      target:
        required: true
        type: string
      gcchash:
        required: true
        type: string
      multilib:
        required: true
        type: string

jobs:
  build:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v2

      - name: Load submodules from cache
        uses: actions/cache@v3
        id: restore-build
        with:
          path: |
            binutils
            dejagnu
            gcc
            gdb
            glibc
            llvm
            musl
            newlib
            pk
            qemu
          key: submodules

      - name: Checkout gcc hash
        run: |
          cd gcc
          git fetch
          git checkout ${{ inputs.gcchash }}

      - name: Install dependencies
        run: sudo ./.github/setup-apt.sh

      - name: Configure
        run: |
          mkdir build
          cd build
          TARGET_TUPLE=($(echo ${{ inputs.target }} | tr "-" "\n"))
          CONFIGURE_TOOLCHAIN="../configure --prefix=$(pwd) --with-arch=${TARGET_TUPLE[0]} --with-abi=${TARGET_TUPLE[1]}"
          if [ "${{ inputs.multilib }}" == "multilib" ]; then
            $CONFIGURE_TOOLCHAIN --enable-multilib
          else
            $CONFIGURE_TOOLCHAIN
          fi

      - name: Make gcc
        run: |
          cd build
          make -j $(nproc) ${{ inputs.mode }}

      - name: Upload binary artifact
        uses: actions/upload-artifact@v3
        with:
          name: gcc-${{ inputs.mode }}-${{ inputs.target }}-${{ inputs.gcchash }}-${{ inputs.multilib }}
          path: |
            build/bin
          retention-days: 5

      - name: Upload stage2 artifact
        uses: actions/upload-artifact@v3
        with:
          name: gcc-${{ inputs.mode }}-${{ inputs.target }}-${{ inputs.gcchash }}-${{ inputs.multilib }}-stage2
          path: |
            build/build-gcc-${{ inputs.mode }}-stage2
          retention-days: 5

  test:
    runs-on: ubuntu-22.04
    needs: [build]
    steps:
      - uses: actions/checkout@v2

      - name: Load submodules from cache
        uses: actions/cache@v3
        id: restore-build
        with:
          path: |
            binutils
            dejagnu
            gcc
            gdb
            glibc
            llvm
            musl
            newlib
            pk
            qemu
          key: submodules

      - name: Checkout gcc hash
        run: |
          cd gcc
          git fetch
          git checkout ${{ inputs.gcchash }}

      - name: Install dependencies
        run: sudo ./.github/setup-apt.sh

      - name: Configure
        run: |
          mkdir build
          cd build
          TARGET_TUPLE=($(echo ${{ inputs.target }} | tr "-" "\n"))
          CONFIGURE_TOOLCHAIN="../configure --prefix=$(pwd) --with-arch=${TARGET_TUPLE[0]} --with-abi=${TARGET_TUPLE[1]}"
          if [ "${{ inputs.multilib }}" == "multilib" ]; then
            $CONFIGURE_TOOLCHAIN --enable-multilib
          else
            $CONFIGURE_TOOLCHAIN
          fi

      - name: Restore binaries
        uses: actions/download-artifact@v3
        with:
          name: gcc-${{ inputs.mode }}-${{ inputs.target }}-${{ inputs.gcchash }}-${{ inputs.multilib }}

      - name: Restore stage2
        uses: actions/download-artifact@v3
        with:
          name: gcc-${{ inputs.mode }}-${{ inputs.target }}-${{ inputs.gcchash }}-${{ inputs.multilib }}-stage2

      - name: Debug artifact download
        run: |
          ls
          cd build
          ls

      - name: Fake stamps
        run: |
          mkdir build/stamps
          cd build/stamps
          touch build-gcc-${{ inputs.mode }}-stage1 build-gcc-${{ inputs.mode }}-stage2 \
          check-write-permission build-binutils-${{ inputs.mode }} \
          build-gdb-${{ inputs.mode }} build-${{ inputs.mode }} build-${{ inputs.mode }}-nano \
          merge-${{ inputs.mode }}-nano

      - name: build test
        run: |
          cd build
          make -j $(nproc) ${{ inputs.mode }}

      - name: Run testsuite
        run: |
          cd build
          make -j $(nproc) report-${{ inputs.mode }}

      - name: Save results
        run: |
          make -j $(nproc) report | gcc-${{ inputs.mode }}-${{ inputs.target }}-${{ inputs.gcchash }}-${{ inputs.multilib }}-report.log

      - name: Upload stage2 artifact
        uses: actions/upload-artifact@v3
        with:
          name: gcc-${{ inputs.mode }}-${{ inputs.target }}-${{ inputs.gcchash }}-${{ inputs.multilib }}-report
          path: |
            gcc-${{ inputs.mode }}-${{ inputs.target }}-${{ inputs.gcchash }}-${{ inputs.multilib }}-report.log
          retention-days: 90
